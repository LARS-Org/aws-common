[
    {
        "label": "jsii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jsii",
        "description": "jsii",
        "detail": "jsii",
        "documentation": {}
    },
    {
        "label": "Aspects",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "Duration",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "IAspect",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "RemovalPolicy",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_apigateway",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_dynamodb",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_events",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_iam",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_lambda",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_logs",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_sns",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "aws_ssm",
        "importPath": "aws_cdk",
        "description": "aws_cdk",
        "isExtraImport": true,
        "detail": "aws_cdk",
        "documentation": {}
    },
    {
        "label": "Construct",
        "importPath": "constructs",
        "description": "constructs",
        "isExtraImport": true,
        "detail": "constructs",
        "documentation": {}
    },
    {
        "label": "IConstruct",
        "importPath": "constructs",
        "description": "constructs",
        "isExtraImport": true,
        "detail": "constructs",
        "documentation": {}
    },
    {
        "label": "_do_log",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "DecimalEncoder",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "get_first_element",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "get_first_non_none",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "str_is_none_or_empty",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "DecimalEncoder",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "_do_log",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "get_first_element",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "get_first_non_none",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "http_request",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "json_dumps",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "run_command",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "str_is_none_or_empty",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "DecimalEncoder",
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "isExtraImport": true,
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "app_utils",
        "importPath": "app_common",
        "description": "app_common",
        "isExtraImport": true,
        "detail": "app_common",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "boto3.dynamodb.conditions",
        "description": "boto3.dynamodb.conditions",
        "isExtraImport": true,
        "detail": "boto3.dynamodb.conditions",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "importlib.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.util",
        "description": "importlib.util",
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "do_deploy",
        "importPath": "app_deploy",
        "description": "app_deploy",
        "isExtraImport": true,
        "detail": "app_deploy",
        "documentation": {}
    },
    {
        "label": "do_install_req",
        "importPath": "app_install_reqs",
        "description": "app_install_reqs",
        "isExtraImport": true,
        "detail": "app_install_reqs",
        "documentation": {}
    },
    {
        "label": "do_reset_venv",
        "importPath": "app_reset_venv",
        "description": "app_reset_venv",
        "isExtraImport": true,
        "detail": "app_reset_venv",
        "documentation": {}
    },
    {
        "label": "do_run_tests",
        "importPath": "app_test",
        "description": "app_test",
        "isExtraImport": true,
        "detail": "app_test",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "mock_aws",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "mock_aws",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "mock_aws",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "BaseLambdaHandler",
        "importPath": "app_common.base_lambda_handler",
        "description": "app_common.base_lambda_handler",
        "isExtraImport": true,
        "detail": "app_common.base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "BaseLambdaHandler",
        "importPath": "app_common.base_lambda_handler",
        "description": "app_common.base_lambda_handler",
        "isExtraImport": true,
        "detail": "app_common.base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "DynamoDBBase",
        "importPath": "app_common.dynamodb_utils",
        "description": "app_common.dynamodb_utils",
        "isExtraImport": true,
        "detail": "app_common.dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "DynamoDBBase",
        "importPath": "app_common.dynamodb_utils",
        "description": "app_common.dynamodb_utils",
        "isExtraImport": true,
        "detail": "app_common.dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "NonUserFacingException",
        "importPath": "app_common.exceptions_utils",
        "description": "app_common.exceptions_utils",
        "isExtraImport": true,
        "detail": "app_common.exceptions_utils",
        "documentation": {}
    },
    {
        "label": "do_deploy",
        "importPath": "app_scripts.app_deploy",
        "description": "app_scripts.app_deploy",
        "isExtraImport": true,
        "detail": "app_scripts.app_deploy",
        "documentation": {}
    },
    {
        "label": "deploy_module",
        "importPath": "deploy_all",
        "description": "deploy_all",
        "isExtraImport": true,
        "detail": "deploy_all",
        "documentation": {}
    },
    {
        "label": "deploy_module",
        "importPath": "deploy_all",
        "description": "deploy_all",
        "isExtraImport": true,
        "detail": "deploy_all",
        "documentation": {}
    },
    {
        "label": "retry_on_failure",
        "importPath": "deploy_all",
        "description": "deploy_all",
        "isExtraImport": true,
        "detail": "deploy_all",
        "documentation": {}
    },
    {
        "label": "generate_auth_response_as_iam_policy",
        "kind": 2,
        "importPath": "app_common.api_gateway_utils",
        "description": "app_common.api_gateway_utils",
        "peekOfCode": "def generate_auth_response_as_iam_policy(\n    principal_id,\n    action=EXECUTE_API_INVOKE_ACTION,\n    effect=\"\",\n    resource=\"\",\n    response_context: dict | None = None,\n) -> dict:\n    \"\"\"\n    Given the input parameters describing the response to an authorization request,\n    formats the supplied information as an IAM policy dictionary and returns it.",
        "detail": "app_common.api_gateway_utils",
        "documentation": {}
    },
    {
        "label": "generate_allow_auth_response",
        "kind": 2,
        "importPath": "app_common.api_gateway_utils",
        "description": "app_common.api_gateway_utils",
        "peekOfCode": "def generate_allow_auth_response(\n    principal_id,\n    action=EXECUTE_API_INVOKE_ACTION,\n    resource=\"\",\n    response_context: dict | None = None,\n):\n    \"\"\"\n    A shortcut method that generates an IAM policy allowing the principal (user, role,\n    etc.) with the given ID to proceed with an action on a resource.\n    Designed to be used in Lambda functions underlying API Gateway Lambda authorizers.",
        "detail": "app_common.api_gateway_utils",
        "documentation": {}
    },
    {
        "label": "generate_deny_auth_response",
        "kind": 2,
        "importPath": "app_common.api_gateway_utils",
        "description": "app_common.api_gateway_utils",
        "peekOfCode": "def generate_deny_auth_response(\n    principal_id,\n    action=EXECUTE_API_INVOKE_ACTION,\n    resource=\"\",\n    response_context: dict | None = None,\n):\n    \"\"\"\n    A shortcut method that generates an IAM policy denying the principal (user, role,\n    etc.) with the given ID to proceed with an action on a resource.\n    Designed to be used in Lambda functions underlying API Gateway Lambda authorizers.",
        "detail": "app_common.api_gateway_utils",
        "documentation": {}
    },
    {
        "label": "EXECUTE_API_INVOKE_ACTION",
        "kind": 5,
        "importPath": "app_common.api_gateway_utils",
        "description": "app_common.api_gateway_utils",
        "peekOfCode": "EXECUTE_API_INVOKE_ACTION = \"execute-api:Invoke\"\ndef generate_auth_response_as_iam_policy(\n    principal_id,\n    action=EXECUTE_API_INVOKE_ACTION,\n    effect=\"\",\n    resource=\"\",\n    response_context: dict | None = None,\n) -> dict:\n    \"\"\"\n    Given the input parameters describing the response to an authorization request,",
        "detail": "app_common.api_gateway_utils",
        "documentation": {}
    },
    {
        "label": "GrantPublishToCustomEventBusAspect",
        "kind": 6,
        "importPath": "app_common.app_common_stack",
        "description": "app_common.app_common_stack",
        "peekOfCode": "class GrantPublishToCustomEventBusAspect:\n    \"\"\"\n    Aspect that automatically grants permissions for all Lambda functions\n    in the stack to publish to a specific EventBridge event bus.\n    \"\"\"\n    def __init__(self, custom_event_bus_name: str) -> None:\n        self.custom_event_bus_name = custom_event_bus_name\n    def visit(self, node: IConstruct) -> None:\n        \"\"\"\n        Visit each node in the construct tree and attach",
        "detail": "app_common.app_common_stack",
        "documentation": {}
    },
    {
        "label": "AppCommonStack",
        "kind": 6,
        "importPath": "app_common.app_common_stack",
        "description": "app_common.app_common_stack",
        "peekOfCode": "class AppCommonStack(Stack):\n    \"\"\"\n    A common stack that ensures all Lambda functions in the stack automatically\n    have permission to publish to the ErrorHandlingTopic.\n    \"\"\"\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:\n        super().__init__(scope, construct_id, **kwargs)\n        if self._get_custom_event_bus_name():\n            Aspects.of(self).add(\n                GrantPublishToCustomEventBusAspect(self._get_custom_event_bus_name())",
        "detail": "app_common.app_common_stack",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "kind": 2,
        "importPath": "app_common.app_config",
        "description": "app_common.app_config",
        "peekOfCode": "def is_valid_email(email: str) -> bool:\n    \"\"\"Check if the provided email is valid using a regex pattern.\"\"\"\n    email_regex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n    return re.match(email_regex, email) is not None\ntry:\n    email_recipients_parameter = os.environ[\"AppDefaultEmailRecipients\"]\n    if (\n        email_recipients_parameter.strip()\n    ):  # Check if the string is non-empty after stripping spaces\n        AppDefaultEmailRecipients = [",
        "detail": "app_common.app_config",
        "documentation": {}
    },
    {
        "label": "DecimalEncoder",
        "kind": 6,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "class DecimalEncoder(json.JSONEncoder):\n    \"\"\"\n    Utility class to encode `decimal.Decimal` objects as strings.\n    \"\"\"\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            return str(o)\n        return super().default(o)\ndef get_first_non_none(*args, **kwargs):\n    \"\"\"",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "get_first_non_none",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def get_first_non_none(*args, **kwargs):\n    \"\"\"\n    Returns the first argument that is not None, in case such an argument\n    exists.\n    \"\"\"\n    return next(\n        (arg for arg in list(args) + list(kwargs.values()) if arg is not None), None\n    )\ndef get_first_element(lst: list):\n    \"\"\"",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "get_first_element",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def get_first_element(lst: list):\n    \"\"\"\n    Returns the first element of a list, in case such an element exists.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(f\"Expected list, got {type(lst).__name__}\")\n    return lst[0] if lst else None\ndef str_is_none_or_empty(s) -> bool:\n    \"\"\"\n    Returns `True` in case the input argument is `None` or evaluates to an",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "str_is_none_or_empty",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def str_is_none_or_empty(s) -> bool:\n    \"\"\"\n    Returns `True` in case the input argument is `None` or evaluates to an\n    empty string, or `False` otherwise.\n    \"\"\"\n    if s is None:\n        return True\n    if isinstance(s, str):\n        return s.strip() == \"\"\n    if str(s).strip() == \"\":",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def is_numeric(x) -> bool:\n    \"\"\"\n    Returns `True` in case the input argument is numeric. An argument is\n    considered numeric if it is either an `int`, a `float`, or a string\n    representing a number.\n    \"\"\"\n    if x is None:\n        return False\n    try:\n        float(x)",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "json_dumps",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def json_dumps(data, indent=4, cls=DecimalEncoder, **kwargs) -> str:\n    \"\"\"\n    Utility method to serialize data to JSON, including Decimal values.\n    \"\"\"\n    return json.dumps(data, indent=indent, cls=cls, **kwargs)\ndef _do_log(\n    obj,\n    title=None,\n    line_len_limit: int = 100,\n    line_break_chars: str = \" \",",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "http_request",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def http_request(\n    method, url, headers=None, json_data=None, params=None, timeout=30, **kwargs\n):\n    \"\"\"\n    Make an HTTP request using urllib3.\n    :param method: HTTP method (e.g., \"GET\", \"POST\").\n    :param url: URL to make the request to.\n    :param headers: Dictionary of headers to include in the request.\n    :param json_data: JSON payload for the request body.\n        If provided, Content-Type will be set to application/json.",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def run_command(command, cwd=None, shell=False, check=True, **kwargs):\n    \"\"\"\n    Run a shell command in the specified directory.\n    :param command: The command to run.\n    :param cwd: The directory to run the command in.\n    :param shell: Whether to use a shell to run the command.\n    \"\"\"\n    # TODO: #17 Fix it getting the correct path from the user's Windows environment\n    # Replace 'python3.11' with the current Python executable\n    if isinstance(command, list):",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "unix_epoch_now",
        "kind": 2,
        "importPath": "app_common.app_utils",
        "description": "app_common.app_utils",
        "peekOfCode": "def unix_epoch_now() -> int:\n    \"\"\"\n    Utility method to return the current timestamp,\n    considering the Unix Epoch reference.\n    \"\"\"\n    return int(time.time())",
        "detail": "app_common.app_utils",
        "documentation": {}
    },
    {
        "label": "BaseLambdaHandler",
        "kind": 6,
        "importPath": "app_common.base_lambda_handler",
        "description": "app_common.base_lambda_handler",
        "peekOfCode": "class BaseLambdaHandler(ABC):\n    \"\"\"\n    BaseLambdaHandler is a class that can be used as a base for Lambda\n    handlers. It provides a few useful features such as exception handling and\n    execution hooks. At the very least, subclasses must override the\n    ``handle()`` method in order to service lambda function invocations.\n    This class relies on some core attributes:\n    - ``context``: this is the ``context`` parameter received from AWS when a\n        lambda function is invoked, and has to do AWS infrastructure;\n    - ``event``: this is the ``event`` parameter received from AWS when a",
        "detail": "app_common.base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "DynamoDBBase",
        "kind": 6,
        "importPath": "app_common.dynamodb_utils",
        "description": "app_common.dynamodb_utils",
        "peekOfCode": "class DynamoDBBase:\n    \"\"\"Handles common operations for DynamoDB tables.\"\"\"\n    def __init__(self, table_name):\n        self._table_name = table_name\n        self._table = dynamodb.Table(table_name)\n    def recreate_table_resource(self):\n        \"\"\"\n        Recreates the ``Table`` resource of this instance through the global\n        ``dynamodb`` resource. This is meant to be used mainly for testing purposes,\n        e.g., after replacing the global ``dynamodb`` resource to point to a DynamoDB",
        "detail": "app_common.dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "replace_dynamodb_resource",
        "kind": 2,
        "importPath": "app_common.dynamodb_utils",
        "description": "app_common.dynamodb_utils",
        "peekOfCode": "def replace_dynamodb_resource(new_dynamodb_resource):\n    \"\"\"\n    Replaces the global ``dynamodb`` resource with the given resource.\n    This is meant to be used mainly for testing purposes, e.g., to use a DynamoDB\n    Local instance instead of the default one provided by the AWS environment:\n    ```\n    new_dynamodb = boto3.resource(\"dynamodb\", endpoint_url=\"http://localhost:8000\")\n    replace_dynamodb_resource(new_dynamodb)\n    ```\n    \"\"\"",
        "detail": "app_common.dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "create_table_resource",
        "kind": 2,
        "importPath": "app_common.dynamodb_utils",
        "description": "app_common.dynamodb_utils",
        "peekOfCode": "def create_table_resource(\n    table_name: str,\n    partition_key_name: str,\n    partition_key_attribute_type: str,\n    sort_key_name: str,\n    sort_key_attribute_type: str,\n    global_secondary_index_name: str,\n    global_secondary_index_partition_key_name: str,\n    global_secondary_index_projection_type: str = \"ALL\",\n    table_read_capacity_units: int = 1,",
        "detail": "app_common.dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "app_common.dynamodb_utils",
        "description": "app_common.dynamodb_utils",
        "peekOfCode": "dynamodb = boto3.resource(\"dynamodb\")\ndef replace_dynamodb_resource(new_dynamodb_resource):\n    \"\"\"\n    Replaces the global ``dynamodb`` resource with the given resource.\n    This is meant to be used mainly for testing purposes, e.g., to use a DynamoDB\n    Local instance instead of the default one provided by the AWS environment:\n    ```\n    new_dynamodb = boto3.resource(\"dynamodb\", endpoint_url=\"http://localhost:8000\")\n    replace_dynamodb_resource(new_dynamodb)\n    ```",
        "detail": "app_common.dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "NonUserFacingException",
        "kind": 6,
        "importPath": "app_common.exceptions_utils",
        "description": "app_common.exceptions_utils",
        "peekOfCode": "class NonUserFacingException(Exception):\n    \"\"\"\n    Exception raised for errors that should be handled internally\n    and not exposed to the user.\n    Attributes:\n        message -- explanation of the error\n    \"\"\"\n    def __init__(\n        self,\n        message=\"An internal error occurred.\",",
        "detail": "app_common.exceptions_utils",
        "documentation": {}
    },
    {
        "label": "set_aws_environment_variables",
        "kind": 2,
        "importPath": "app_common.utils4tests",
        "description": "app_common.utils4tests",
        "peekOfCode": "def set_aws_environment_variables(\n    aws_access_key_id: str,\n    aws_secret_access_key: str,\n    aws_security_token: str,\n    aws_session_token: str,\n    aws_default_region: str = \"us-east-1\",\n):\n    \"\"\"\n    Sets some environment variables used by AWS.\n    \"\"\"",
        "detail": "app_common.utils4tests",
        "documentation": {}
    },
    {
        "label": "set_fake_aws_environment_variables",
        "kind": 2,
        "importPath": "app_common.utils4tests",
        "description": "app_common.utils4tests",
        "peekOfCode": "def set_fake_aws_environment_variables(aws_default_region: str = \"us-east-1\"):\n    \"\"\"\n    Sets some environment variables used by AWS with fake values.\n    This is meant to be used mainly for testing purposes, as some resources provided\n    by the ``boto3`` library refuse to initialize when certain environment variables\n    are empty.\n    \"\"\"\n    set_aws_environment_variables(\n        \"testing\", \"testing\", \"testing\", \"testing\", aws_default_region\n    )",
        "detail": "app_common.utils4tests",
        "documentation": {}
    },
    {
        "label": "do_deploy",
        "kind": 2,
        "importPath": "app_scripts.app_deploy",
        "description": "app_scripts.app_deploy",
        "peekOfCode": "def do_deploy(do_log_func, run_cmd_func):\n    \"\"\"\n    Deploy the application.\n    \"\"\"\n    do_log_func(\"deploying...\")\n    # ensure the CDK is installed and deploy the stack\n    run_cmd_func(\"npm install -g aws-cdk\", shell=True)\n    run_cmd_func(\"cdk bootstrap\", shell=True)\n    run_cmd_func(\"cdk deploy --require-approval never\", shell=True)\n    do_log_func(\"deployed!\")",
        "detail": "app_scripts.app_deploy",
        "documentation": {}
    },
    {
        "label": "do_install_req",
        "kind": 2,
        "importPath": "app_scripts.app_install_reqs",
        "description": "app_scripts.app_install_reqs",
        "peekOfCode": "def do_install_req(do_log_func, run_cmd_func):\n    \"\"\"\n    Main function to install all project requirements.\n    \"\"\"\n    _purge_pip_cache(do_log_func, run_cmd_func)\n    _remove_pip_selfcheck(do_log_func)\n    _upgrade_pip(do_log_func, run_cmd_func)\n    _install_dev_requirements(do_log_func, run_cmd_func)\n    _install_from_aws_common(do_log_func, run_cmd_func)\n    _install_requirements_recursively(do_log_func, run_cmd_func)",
        "detail": "app_scripts.app_install_reqs",
        "documentation": {}
    },
    {
        "label": "do_reset_venv",
        "kind": 2,
        "importPath": "app_scripts.app_reset_venv",
        "description": "app_scripts.app_reset_venv",
        "peekOfCode": "def do_reset_venv(do_log_func, run_cmd_func):\n    \"\"\"\n    Recreate the Python virtual environment.\n    \"\"\"\n    do_log_func(f\"*** Deleting all content under {PYTHON_VENV_DIR}...\")\n    shutil.rmtree(PYTHON_VENV_DIR, ignore_errors=True)\n    do_log_func(\"*** Recreating Python virtual environment...\")\n    run_cmd_func([\"python3.11\", \"-m\", \"venv\", PYTHON_VENV_DIR])\n    activate_script = os.path.join(PYTHON_VENV_DIR, \"bin\", \"activate\")\n    # warn the user to activate the virtual environment",
        "detail": "app_scripts.app_reset_venv",
        "documentation": {}
    },
    {
        "label": "PYTHON_VENV_DIR",
        "kind": 5,
        "importPath": "app_scripts.app_reset_venv",
        "description": "app_scripts.app_reset_venv",
        "peekOfCode": "PYTHON_VENV_DIR = \"venv\"\nif os.getenv(\"AWS_COMMON_PYTHON_VENV_DIR\"):\n    PYTHON_VENV_DIR = os.getenv(\"AWS_COMMON_PYTHON_VENV_DIR\")\n    print(f\"Using Python virtual environment directory: {PYTHON_VENV_DIR}\")\ndef do_reset_venv(do_log_func, run_cmd_func):\n    \"\"\"\n    Recreate the Python virtual environment.\n    \"\"\"\n    do_log_func(f\"*** Deleting all content under {PYTHON_VENV_DIR}...\")\n    shutil.rmtree(PYTHON_VENV_DIR, ignore_errors=True)",
        "detail": "app_scripts.app_reset_venv",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app_scripts.app_setup",
        "description": "app_scripts.app_setup",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to parse command-line arguments and call the appropriate function.\n    \"\"\"\n    # Get the current script directory\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    # Construct path to sibling directory\n    common_project_dir = os.path.join(current_dir, \"..\", \"aws-common\")\n    # check if script directory exists\n    if not os.path.exists(common_project_dir):",
        "detail": "app_scripts.app_setup",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to parse command-line arguments and call the appropriate function.\n    \"\"\"\n    error_msg_args = (\n        \"Usage: app_setup.py --<setup_venv|install_requirements|deploy|run_tests>\"\n    )\n    if len(sys.argv) != 4:\n        _do_log(error_msg_args)\n        sys.exit(1)",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "MENU_VENV_OPTIONS",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "MENU_VENV_OPTIONS = {\n    \"--setup_venv\",\n    \"--setup\",\n    \"--reset_venv\",\n    \"setup_venv\",\n    \"setup\",\n    \"reset_venv\",\n}\nMENU_INSTALL_OPTIONS = {\n    \"--install_requirements\",",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "MENU_INSTALL_OPTIONS",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "MENU_INSTALL_OPTIONS = {\n    \"--install_requirements\",\n    \"--install\",\n    \"--install_reqs\",\n    \"install_requirements\",\n    \"install\",\n    \"install_reqs\",\n}\nMENU_DEPLOY_OPTIONS = {\n    \"--deploy\",",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "MENU_DEPLOY_OPTIONS",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "MENU_DEPLOY_OPTIONS = {\n    \"--deploy\",\n    \"--deploy_stack\",\n    \"--deploy_cdk\",\n    \"--deploy_app\",\n    \"deploy\",\n    \"deploy_stack\",\n    \"deploy_cdk\",\n    \"deploy_app\",\n}",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "MENU_FAST_DEPLOY_OPTIONS",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "MENU_FAST_DEPLOY_OPTIONS = {\"fast_deploy\", \"--fast_deploy\"}\nMENU_HELP_OPTIONS = {\"--help\", \"-h\", \"help\"}\nMENU_TEST_OPTIONS = {\"run_tests\", \"--run_tests\", \"test\", \"--test\", \"tests\", \"--tests\"}\nMENU_OPTIONS = (\n    MENU_VENV_OPTIONS\n    | MENU_INSTALL_OPTIONS\n    | MENU_DEPLOY_OPTIONS\n    | MENU_FAST_DEPLOY_OPTIONS\n    | MENU_HELP_OPTIONS\n    | MENU_TEST_OPTIONS",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "MENU_HELP_OPTIONS",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "MENU_HELP_OPTIONS = {\"--help\", \"-h\", \"help\"}\nMENU_TEST_OPTIONS = {\"run_tests\", \"--run_tests\", \"test\", \"--test\", \"tests\", \"--tests\"}\nMENU_OPTIONS = (\n    MENU_VENV_OPTIONS\n    | MENU_INSTALL_OPTIONS\n    | MENU_DEPLOY_OPTIONS\n    | MENU_FAST_DEPLOY_OPTIONS\n    | MENU_HELP_OPTIONS\n    | MENU_TEST_OPTIONS\n)",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "MENU_TEST_OPTIONS",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "MENU_TEST_OPTIONS = {\"run_tests\", \"--run_tests\", \"test\", \"--test\", \"tests\", \"--tests\"}\nMENU_OPTIONS = (\n    MENU_VENV_OPTIONS\n    | MENU_INSTALL_OPTIONS\n    | MENU_DEPLOY_OPTIONS\n    | MENU_FAST_DEPLOY_OPTIONS\n    | MENU_HELP_OPTIONS\n    | MENU_TEST_OPTIONS\n)\n# getting the project root directory",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "MENU_OPTIONS",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "MENU_OPTIONS = (\n    MENU_VENV_OPTIONS\n    | MENU_INSTALL_OPTIONS\n    | MENU_DEPLOY_OPTIONS\n    | MENU_FAST_DEPLOY_OPTIONS\n    | MENU_HELP_OPTIONS\n    | MENU_TEST_OPTIONS\n)\n# getting the project root directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "current_dir",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "current_dir = os.path.dirname(os.path.abspath(__file__))\nroot_dir = os.path.join(current_dir, \"..\")\n# finding the common directory\ncommon_dir = os.path.join(root_dir, \"app_common\")\n# Construct the path to the utils module\nutils_script_path = os.path.join(common_dir, \"app_utils.py\")\n# Load the module dynamically\n# It is necessary to add the module to the sys.modules dictionary\n# to avoid ModuleNotFoundError when importing it from the caller script.\nspec = importlib.util.spec_from_file_location(\"app_utils_module\", utils_script_path)",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "root_dir = os.path.join(current_dir, \"..\")\n# finding the common directory\ncommon_dir = os.path.join(root_dir, \"app_common\")\n# Construct the path to the utils module\nutils_script_path = os.path.join(common_dir, \"app_utils.py\")\n# Load the module dynamically\n# It is necessary to add the module to the sys.modules dictionary\n# to avoid ModuleNotFoundError when importing it from the caller script.\nspec = importlib.util.spec_from_file_location(\"app_utils_module\", utils_script_path)\n_UTILS_MODULE = importlib.util.module_from_spec(spec)",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "common_dir",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "common_dir = os.path.join(root_dir, \"app_common\")\n# Construct the path to the utils module\nutils_script_path = os.path.join(common_dir, \"app_utils.py\")\n# Load the module dynamically\n# It is necessary to add the module to the sys.modules dictionary\n# to avoid ModuleNotFoundError when importing it from the caller script.\nspec = importlib.util.spec_from_file_location(\"app_utils_module\", utils_script_path)\n_UTILS_MODULE = importlib.util.module_from_spec(spec)\nsys.modules[\"app_utils_module\"] = _UTILS_MODULE\nspec.loader.exec_module(_UTILS_MODULE)",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "utils_script_path",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "utils_script_path = os.path.join(common_dir, \"app_utils.py\")\n# Load the module dynamically\n# It is necessary to add the module to the sys.modules dictionary\n# to avoid ModuleNotFoundError when importing it from the caller script.\nspec = importlib.util.spec_from_file_location(\"app_utils_module\", utils_script_path)\n_UTILS_MODULE = importlib.util.module_from_spec(spec)\nsys.modules[\"app_utils_module\"] = _UTILS_MODULE\nspec.loader.exec_module(_UTILS_MODULE)\ndef _do_log(obj, title=None, line_len_limit: int = 150):\n    \"\"\"",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "spec = importlib.util.spec_from_file_location(\"app_utils_module\", utils_script_path)\n_UTILS_MODULE = importlib.util.module_from_spec(spec)\nsys.modules[\"app_utils_module\"] = _UTILS_MODULE\nspec.loader.exec_module(_UTILS_MODULE)\ndef _do_log(obj, title=None, line_len_limit: int = 150):\n    \"\"\"\n    Wrapper function to call the do_log function from the app_utils module.\n    \"\"\"\n    _UTILS_MODULE._do_log(obj, title=title, line_len_limit=line_len_limit)\ndef _run_command(command, cwd=None, shell=False, check=True, **kwargs):",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "_UTILS_MODULE",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "_UTILS_MODULE = importlib.util.module_from_spec(spec)\nsys.modules[\"app_utils_module\"] = _UTILS_MODULE\nspec.loader.exec_module(_UTILS_MODULE)\ndef _do_log(obj, title=None, line_len_limit: int = 150):\n    \"\"\"\n    Wrapper function to call the do_log function from the app_utils module.\n    \"\"\"\n    _UTILS_MODULE._do_log(obj, title=title, line_len_limit=line_len_limit)\ndef _run_command(command, cwd=None, shell=False, check=True, **kwargs):\n    \"\"\"",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "sys.modules[\"app_utils_module\"]",
        "kind": 5,
        "importPath": "app_scripts.app_setup_execution",
        "description": "app_scripts.app_setup_execution",
        "peekOfCode": "sys.modules[\"app_utils_module\"] = _UTILS_MODULE\nspec.loader.exec_module(_UTILS_MODULE)\ndef _do_log(obj, title=None, line_len_limit: int = 150):\n    \"\"\"\n    Wrapper function to call the do_log function from the app_utils module.\n    \"\"\"\n    _UTILS_MODULE._do_log(obj, title=title, line_len_limit=line_len_limit)\ndef _run_command(command, cwd=None, shell=False, check=True, **kwargs):\n    \"\"\"\n    Wrapper function to call the run_command function from the app_utils module.",
        "detail": "app_scripts.app_setup_execution",
        "documentation": {}
    },
    {
        "label": "do_run_tests",
        "kind": 2,
        "importPath": "app_scripts.app_test",
        "description": "app_scripts.app_test",
        "peekOfCode": "def do_run_tests(do_log_func, run_cmd_func) -> bool:\n    \"\"\"\n    Run all the tests for the project.\n    \"\"\"\n    do_log_func(\"*** Running all tests for the project...\")\n    # python -m pytest tests/unit/\n    run_cmd_func([\"python\", \"-m\", \"pytest\", \"tests/unit/\"])\n    do_log_func(\"*** All tests passed.\")\n    # While we don't implement this behavior, we'll return True\n    return True",
        "detail": "app_scripts.app_test",
        "documentation": {}
    },
    {
        "label": "TestBaseLambdaHandler",
        "kind": 6,
        "importPath": "tests.integration.test_base_lambda_handler_integration",
        "description": "tests.integration.test_base_lambda_handler_integration",
        "peekOfCode": "class TestBaseLambdaHandler:\n    \"\"\"Class for BaseLambdaHandler integration tests.\"\"\"\n    def test_lambda_invocation(self, mock_event, mock_context):\n        \"\"\"Test the entire Lambda invocation process.\"\"\"\n        class TestLambdaHandler(BaseLambdaHandler):\n            def _handle(self):\n                return {\"statusCode\": 200, \"body\": \"Success\"}\n        handler = TestLambdaHandler()\n        response = handler(mock_event, mock_context)\n        assert response[\"statusCode\"] == 200",
        "detail": "tests.integration.test_base_lambda_handler_integration",
        "documentation": {}
    },
    {
        "label": "setup_s3",
        "kind": 2,
        "importPath": "tests.integration.test_base_lambda_handler_integration",
        "description": "tests.integration.test_base_lambda_handler_integration",
        "peekOfCode": "def setup_s3():\n    \"\"\"Fixture to mock S3 and create a bucket.\"\"\"\n    with mock_aws():\n        s3 = boto3.resource(\"s3\")\n        bucket_name = \"test-bucket\"\n        s3.create_bucket(Bucket=bucket_name)\n        yield bucket_name, s3\n@pytest.fixture(scope=\"class\")\ndef setup_sqs():\n    \"\"\"Fixture to mock SQS and create a FIFO queue with",
        "detail": "tests.integration.test_base_lambda_handler_integration",
        "documentation": {}
    },
    {
        "label": "setup_sqs",
        "kind": 2,
        "importPath": "tests.integration.test_base_lambda_handler_integration",
        "description": "tests.integration.test_base_lambda_handler_integration",
        "peekOfCode": "def setup_sqs():\n    \"\"\"Fixture to mock SQS and create a FIFO queue with\n    ContentBasedDeduplication enabled.\"\"\"\n    with mock_aws():\n        sqs = boto3.resource(\"sqs\")\n        queue = sqs.create_queue(\n            QueueName=\"test-queue.fifo\",\n            Attributes={\n                \"FifoQueue\": \"true\",\n                \"ContentBasedDeduplication\": \"true\",",
        "detail": "tests.integration.test_base_lambda_handler_integration",
        "documentation": {}
    },
    {
        "label": "setup_sns",
        "kind": 2,
        "importPath": "tests.integration.test_base_lambda_handler_integration",
        "description": "tests.integration.test_base_lambda_handler_integration",
        "peekOfCode": "def setup_sns():\n    \"\"\"Fixture to mock SNS and create a topic.\"\"\"\n    with mock_aws():\n        sns = boto3.client(\"sns\")\n        topic_arn = sns.create_topic(Name=\"test-topic\")[\"TopicArn\"]\n        yield topic_arn, sns\n@pytest.fixture(scope=\"function\")\ndef mock_event():\n    \"\"\"Fixture to create a mock Lambda event.\"\"\"\n    return {",
        "detail": "tests.integration.test_base_lambda_handler_integration",
        "documentation": {}
    },
    {
        "label": "mock_event",
        "kind": 2,
        "importPath": "tests.integration.test_base_lambda_handler_integration",
        "description": "tests.integration.test_base_lambda_handler_integration",
        "peekOfCode": "def mock_event():\n    \"\"\"Fixture to create a mock Lambda event.\"\"\"\n    return {\n        \"body\": json.dumps({\"key\": \"value\"}),\n        \"headers\": {\"Authorization\": \"Bearer token\"},\n    }\n@pytest.fixture(scope=\"function\")\ndef mock_context():\n    \"\"\"Fixture to create a mock Lambda context.\"\"\"\n    return {}  # Mock context",
        "detail": "tests.integration.test_base_lambda_handler_integration",
        "documentation": {}
    },
    {
        "label": "mock_context",
        "kind": 2,
        "importPath": "tests.integration.test_base_lambda_handler_integration",
        "description": "tests.integration.test_base_lambda_handler_integration",
        "peekOfCode": "def mock_context():\n    \"\"\"Fixture to create a mock Lambda context.\"\"\"\n    return {}  # Mock context\nclass TestBaseLambdaHandler:\n    \"\"\"Class for BaseLambdaHandler integration tests.\"\"\"\n    def test_lambda_invocation(self, mock_event, mock_context):\n        \"\"\"Test the entire Lambda invocation process.\"\"\"\n        class TestLambdaHandler(BaseLambdaHandler):\n            def _handle(self):\n                return {\"statusCode\": 200, \"body\": \"Success\"}",
        "detail": "tests.integration.test_base_lambda_handler_integration",
        "documentation": {}
    },
    {
        "label": "BaseDynamoDBIntegrationTest",
        "kind": 6,
        "importPath": "tests.integration.test_dynamodb_utils_integration",
        "description": "tests.integration.test_dynamodb_utils_integration",
        "peekOfCode": "class BaseDynamoDBIntegrationTest(TestCase):\n    \"\"\"Base class for DynamoDB integration tests that includes the fixture setup.\"\"\"\n    @pytest.fixture(autouse=True)\n    def setup(self, dynamodb_fixture):\n        \"\"\"Set up DynamoDBBase and mock table.\"\"\"\n        self.dynamodb, self.dynamodb_base = dynamodb_fixture\n    def get_item_from_table(self, table_name, key):\n        \"\"\"Helper method to retrieve an item from the DynamoDB table.\"\"\"\n        table = self.dynamodb.Table(table_name)\n        return table.get_item(Key=key)",
        "detail": "tests.integration.test_dynamodb_utils_integration",
        "documentation": {}
    },
    {
        "label": "TestDynamoDBIntegrationWithDecimalEncoder",
        "kind": 6,
        "importPath": "tests.integration.test_dynamodb_utils_integration",
        "description": "tests.integration.test_dynamodb_utils_integration",
        "peekOfCode": "class TestDynamoDBIntegrationWithDecimalEncoder(BaseDynamoDBIntegrationTest):\n    def test_add_item_with_decimal_encoder(self):\n        \"\"\"Test adding an item to the DynamoDB table with explicit\n        use of DecimalEncoder.\"\"\"\n        item = {\"id\": \"123\", \"sort_key\": 1, \"value\": decimal.Decimal(\"10.1\")}\n        json_encoded_item = json.dumps(item, cls=DecimalEncoder)\n        # Load the JSON string back as a dictionary\n        item_from_json = json.loads(json_encoded_item, parse_float=decimal.Decimal)\n        # Use the deserialized item to add to DynamoDB\n        result = self.dynamodb_base.add(item_from_json)",
        "detail": "tests.integration.test_dynamodb_utils_integration",
        "documentation": {}
    },
    {
        "label": "TestDynamoDBIntegrationWithGetFirst",
        "kind": 6,
        "importPath": "tests.integration.test_dynamodb_utils_integration",
        "description": "tests.integration.test_dynamodb_utils_integration",
        "peekOfCode": "class TestDynamoDBIntegrationWithGetFirst(BaseDynamoDBIntegrationTest):\n    \"\"\"Integration tests for DynamoDBBase using utility functions\n    like get_first_element.\"\"\"\n    def test_get_first_element_from_added_item(self):\n        \"\"\"Test adding an item and retrieving the first element using\n        get_first_element.\"\"\"\n        item = {\"id\": \"123\", \"sort_key\": 1, \"value\": 10.1}\n        self.dynamodb_base.add(item)\n        response = self.get_item_from_table(\n            \"TestTable\", {\"id\": \"123\", \"sort_key\": decimal.Decimal(1)}",
        "detail": "tests.integration.test_dynamodb_utils_integration",
        "documentation": {}
    },
    {
        "label": "TestDynamoDBIntegrationStringChecks",
        "kind": 6,
        "importPath": "tests.integration.test_dynamodb_utils_integration",
        "description": "tests.integration.test_dynamodb_utils_integration",
        "peekOfCode": "class TestDynamoDBIntegrationStringChecks(BaseDynamoDBIntegrationTest):\n    \"\"\"Integration tests for DynamoDBBase with string utility checks.\"\"\"\n    def test_str_is_none_or_empty_in_item(self):\n        \"\"\"Test adding an item and using str_is_none_or_empty to check fields.\"\"\"\n        item = {\"id\": \"123\", \"sort_key\": 1, \"description\": \"\"}\n        self.dynamodb_base.add(item)\n        response = self.get_item_from_table(\n            \"TestTable\", {\"id\": \"123\", \"sort_key\": decimal.Decimal(1)}\n        )\n        result_item = response.get(\"Item\")",
        "detail": "tests.integration.test_dynamodb_utils_integration",
        "documentation": {}
    },
    {
        "label": "TestDynamoDBIntegrationNumericValidation",
        "kind": 6,
        "importPath": "tests.integration.test_dynamodb_utils_integration",
        "description": "tests.integration.test_dynamodb_utils_integration",
        "peekOfCode": "class TestDynamoDBIntegrationNumericValidation(BaseDynamoDBIntegrationTest):\n    \"\"\"Integration tests for DynamoDBBase and numeric utility validation.\"\"\"\n    def test_is_numeric(self):\n        \"\"\"Test adding an item and checking numeric fields using is_numeric.\"\"\"\n        item = {\"id\": \"123\", \"sort_key\": 1, \"value\": 10.1}\n        self.dynamodb_base.add(item)\n        response = self.get_item_from_table(\n            \"TestTable\", {\"id\": \"123\", \"sort_key\": decimal.Decimal(1)}\n        )\n        result_item = response.get(\"Item\")",
        "detail": "tests.integration.test_dynamodb_utils_integration",
        "documentation": {}
    },
    {
        "label": "dynamodb_fixture",
        "kind": 2,
        "importPath": "tests.integration.test_dynamodb_utils_integration",
        "description": "tests.integration.test_dynamodb_utils_integration",
        "peekOfCode": "def dynamodb_fixture():\n    \"\"\"Fixture to set up a mock DynamoDB resource and table.\"\"\"\n    with mock_aws():\n        dynamodb = boto3.resource(\"dynamodb\")\n        table_name = \"TestTable\"\n        dynamodb.create_table(\n            TableName=table_name,\n            KeySchema=[\n                {\"AttributeName\": \"id\", \"KeyType\": \"HASH\"},\n                {\"AttributeName\": \"sort_key\", \"KeyType\": \"RANGE\"},",
        "detail": "tests.integration.test_dynamodb_utils_integration",
        "documentation": {}
    },
    {
        "label": "reload_module",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def reload_module():\n    \"\"\"Helper function to reload the module to apply environment changes\"\"\"\n    import importlib\n    import app_common.app_config\n    importlib.reload(app_common.app_config)\n    return app_common.app_config\ndef test_app_default_email_recipients_with_env_var():\n    # Test when the environment variable is set\n    with patch.dict(\n        os.environ,",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "test_app_default_email_recipients_with_env_var",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def test_app_default_email_recipients_with_env_var():\n    # Test when the environment variable is set\n    with patch.dict(\n        os.environ,\n        {\"AppDefaultEmailRecipients\": \"test1@example.com, test2@example.com\"},\n    ):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == [\n            \"test1@example.com\",\n            \"test2@example.com\",",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "test_app_default_email_recipients_without_env_var",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def test_app_default_email_recipients_without_env_var():\n    # Test when the environment variable is not set\n    with patch.dict(os.environ, {}, clear=True):  # Clear environment variables\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == []\ndef test_app_default_email_recipients_empty_string():\n    # Test when the environment variable is set but the value is an empty string\n    with patch.dict(os.environ, {\"AppDefaultEmailRecipients\": \"\"}):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == []",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "test_app_default_email_recipients_empty_string",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def test_app_default_email_recipients_empty_string():\n    # Test when the environment variable is set but the value is an empty string\n    with patch.dict(os.environ, {\"AppDefaultEmailRecipients\": \"\"}):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == []\ndef test_app_default_email_recipients_single_value():\n    # Test when the environment variable contains a single value\n    with patch.dict(os.environ, {\"AppDefaultEmailRecipients\": \"test@example.com\"}):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == [\"test@example.com\"]",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "test_app_default_email_recipients_single_value",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def test_app_default_email_recipients_single_value():\n    # Test when the environment variable contains a single value\n    with patch.dict(os.environ, {\"AppDefaultEmailRecipients\": \"test@example.com\"}):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == [\"test@example.com\"]\ndef test_valid_emails():\n    # Test with valid emails\n    with patch.dict(\n        \"os.environ\",\n        {\"AppDefaultEmailRecipients\": \"test1@example.com, test2@example.com\"},",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "test_valid_emails",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def test_valid_emails():\n    # Test with valid emails\n    with patch.dict(\n        \"os.environ\",\n        {\"AppDefaultEmailRecipients\": \"test1@example.com, test2@example.com\"},\n    ):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == [\n            \"test1@example.com\",\n            \"test2@example.com\",",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "test_invalid_emails",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def test_invalid_emails():\n    # Test with invalid emails\n    with patch.dict(\n        \"os.environ\", {\"AppDefaultEmailRecipients\": \"test1@example, invalid-email\"}\n    ):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == []\ndef test_mixed_valid_and_invalid_emails():\n    # Test with a mix of valid and invalid emails\n    with patch.dict(",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "test_mixed_valid_and_invalid_emails",
        "kind": 2,
        "importPath": "tests.unit.test_app_common.test_app_config",
        "description": "tests.unit.test_app_common.test_app_config",
        "peekOfCode": "def test_mixed_valid_and_invalid_emails():\n    # Test with a mix of valid and invalid emails\n    with patch.dict(\n        \"os.environ\",\n        {\n            \"AppDefaultEmailRecipients\": \"valid1@example.com, invalid-email, valid2@example.com\"  # noqa:E501\n        },\n    ):\n        config_module = reload_module()\n        assert config_module.AppDefaultEmailRecipients == [",
        "detail": "tests.unit.test_app_common.test_app_config",
        "documentation": {}
    },
    {
        "label": "TestDecimalEncoder",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestDecimalEncoder:\n    def test_decimal_encoder_with_decimal(self):\n        # Test that a decimal.Decimal is converted to a string\n        data = {\"value\": decimal.Decimal(\"10.25\")}\n        json_data = json.dumps(data, cls=DecimalEncoder)\n        assert json_data == '{\"value\": \"10.25\"}'\n    def test_decimal_encoder_with_non_decimal(self):\n        # Test that non-decimal objects are encoded normally\n        # (e.g., strings and integers)\n        data = {\"string\": \"example\", \"int\": 5, \"float\": 3.14}",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestGetFirstNonNone",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestGetFirstNonNone:\n    def test_get_first_non_none_with_all_none_args(self):\n        \"\"\"\n        Test when all positional arguments are None.\n        \"\"\"\n        result = get_first_non_none(None, None, None)\n        assert result is None\n    def test_get_first_non_none_with_mixed_positional_args(self):\n        \"\"\"\n        Test when there is a mix of None and non-None positional arguments.",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestGetFirstElement",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestGetFirstElement:\n    def test_get_first_element_empty_list(self):\n        \"\"\"\n        Test that get_first_element returns None for an empty list.\n        \"\"\"\n        result = get_first_element([])\n        assert result is None\n    def test_get_first_element_single_element_list(self):\n        \"\"\"\n        Test that get_first_element returns the only element in a list with one element.",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestStrIsNoneOrEmpty",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestStrIsNoneOrEmpty:\n    def test_str_is_none(self):\n        \"\"\"\n        Test when the input is None. The function should return True.\n        \"\"\"\n        result = str_is_none_or_empty(None)\n        assert result is True\n    def test_str_is_empty_string(self):\n        \"\"\"\n        Test when the input is an empty string. The function should return True.",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestIsNumeric",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestIsNumeric:\n    def test_is_numeric_with_none(self):\n        \"\"\"\n        Test that None returns False.\n        \"\"\"\n        result = is_numeric(None)\n        assert result is False\n    def test_is_numeric_with_integer(self):\n        \"\"\"\n        Test that an integer returns True.",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestDoLog",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestDoLog:\n    @patch(\"builtins.print\")\n    def test_do_log_string(self, mock_print):\n        \"\"\"\n        Test logging a simple string.\n        \"\"\"\n        test_str = \"Hello, this is a test.\"\n        _do_log(test_str)\n        mock_print.assert_called_once_with(test_str)\n    @patch(\"builtins.print\")",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestHttpRequest",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestHttpRequest:\n    @patch(\"urllib3.PoolManager\")\n    def test_http_request_get_success(self, mock_pool_manager):\n        \"\"\"\n        Test successful GET request with JSON response.\n        \"\"\"\n        mock_response = MagicMock()\n        mock_response.status = 200\n        mock_response.headers = {\"Content-Type\": \"application/json\"}\n        mock_response.data = b'{\"key\": \"value\"}'",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestRunCommand",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestRunCommand:\n    @patch(\"subprocess.run\")\n    def test_run_command_success(self, mock_subprocess_run):\n        \"\"\"\n        Test that run_command runs successfully.\n        \"\"\"\n        mock_subprocess_run.return_value.returncode = 0\n        run_command([\"echo\", \"Hello World\"])\n        mock_subprocess_run.assert_called_once_with(\n            [\"echo\", \"Hello World\"], shell=False, cwd=None",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "TestJsonDumps",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_app_utils",
        "description": "tests.unit.test_app_common.test_app_utils",
        "peekOfCode": "class TestJsonDumps:\n    \"\"\"\n    Test cases for the json_dumps function.\n    The json_dumps function is a wrapper around json.dumps that provides consistent\n    default parameters and handles encoding of special characters.\n    \"\"\"\n    def test_json_dumps_ensure_ascii_false(self):\n        \"\"\"\n        Test json_dumps with ensure_ascii set to False\n        \"\"\"",
        "detail": "tests.unit.test_app_common.test_app_utils",
        "documentation": {}
    },
    {
        "label": "DefaultLambdaHandler",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_base_lambda_handler",
        "description": "tests.unit.test_app_common.test_base_lambda_handler",
        "peekOfCode": "class DefaultLambdaHandler(BaseLambdaHandler):\n    def _handle(self):\n        # Simple implementation for testing\n        return \"Default handle executed\"\nclass TestLambdaHandler(BaseLambdaHandler):\n    def _handle(self):\n        # Simple implementation for testing\n        return \"Test handle executed\"\n    def _security_check(self) -> bool:\n        # Overridden implementation for testing purposes",
        "detail": "tests.unit.test_app_common.test_base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "TestLambdaHandler",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_base_lambda_handler",
        "description": "tests.unit.test_app_common.test_base_lambda_handler",
        "peekOfCode": "class TestLambdaHandler(BaseLambdaHandler):\n    def _handle(self):\n        # Simple implementation for testing\n        return \"Test handle executed\"\n    def _security_check(self) -> bool:\n        # Overridden implementation for testing purposes\n        return False\n    def _before_handle(self):\n        # Simple overridden implementation for testing\n        self.do_log(\"Overridden before_handle() executed\")",
        "detail": "tests.unit.test_app_common.test_base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "SecurityFailingTestLambdaHandler",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_base_lambda_handler",
        "description": "tests.unit.test_app_common.test_base_lambda_handler",
        "peekOfCode": "class SecurityFailingTestLambdaHandler(TestLambdaHandler):\n    def _security_check(self) -> bool:\n        self.do_log(\"Security check called in SecurityFailingTestLambdaHandler.\")\n        return False\nclass TestBaseLambdaHandler:\n    def setup_method(self):\n        \"\"\"\n        Set up a new instance of TestLambdaHandler before each test.\n        \"\"\"\n        self.handler = TestLambdaHandler()",
        "detail": "tests.unit.test_app_common.test_base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "TestBaseLambdaHandler",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_base_lambda_handler",
        "description": "tests.unit.test_app_common.test_base_lambda_handler",
        "peekOfCode": "class TestBaseLambdaHandler:\n    def setup_method(self):\n        \"\"\"\n        Set up a new instance of TestLambdaHandler before each test.\n        \"\"\"\n        self.handler = TestLambdaHandler()\n    def test_initialization(self):\n        \"\"\"\n        Test that the TestLambdaHandler initializes with None for event, context,\n        body, and headers.",
        "detail": "tests.unit.test_app_common.test_base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "TestJsonDumpsInBaseLambdaHandler",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_base_lambda_handler",
        "description": "tests.unit.test_app_common.test_base_lambda_handler",
        "peekOfCode": "class TestJsonDumpsInBaseLambdaHandler:\n    \"\"\"\n    Test cases for the json_dumps function in BaseLambdaHandler.\n    The json_dumps function is a wrapper around json.dumps that provides consistent\n    default parameters and handles encoding of special characters.\n    \"\"\"\n    def test_json_dumps_ensure_ascii_false(self):\n        \"\"\"\n        Test json_dumps with ensure_ascii set to False\n        \"\"\"",
        "detail": "tests.unit.test_app_common.test_base_lambda_handler",
        "documentation": {}
    },
    {
        "label": "TestObject",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_dynamodb_utils",
        "description": "tests.unit.test_app_common.test_dynamodb_utils",
        "peekOfCode": "class TestObject:\n    def __init__(self, attr1, attr2):\n        self.attr1 = attr1\n        self.attr2 = attr2\n@mock_aws\nclass TestDynamoDBBase(TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Print environment variables before executing any tests.\"\"\"\n        aws_region = os.getenv(\"AWS_REGION\", \"Not Set\")",
        "detail": "tests.unit.test_app_common.test_dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "TestDynamoDBBase",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_dynamodb_utils",
        "description": "tests.unit.test_app_common.test_dynamodb_utils",
        "peekOfCode": "class TestDynamoDBBase(TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Print environment variables before executing any tests.\"\"\"\n        aws_region = os.getenv(\"AWS_REGION\", \"Not Set\")\n        aws_default_region = os.getenv(\"AWS_DEFAULT_REGION\", \"Not Set\")\n        print(f\"Environment Variable AWS_REGION: {aws_region}\")\n        print(f\"Environment Variable AWS_DEFAULT_REGION: {aws_default_region}\")\n    def setUp(self):\n        boto3.setup_default_session()",
        "detail": "tests.unit.test_app_common.test_dynamodb_utils",
        "documentation": {}
    },
    {
        "label": "TestExceptionsUtils",
        "kind": 6,
        "importPath": "tests.unit.test_app_common.test_exceptions_utils",
        "description": "tests.unit.test_app_common.test_exceptions_utils",
        "peekOfCode": "class TestExceptionsUtils(TestCase):\n    \"\"\"\n    Test cases for the NonUserFacingException class in exceptions_utils.\n    \"\"\"\n    def test_non_user_facing_exception_default_message(self):\n        \"\"\"\n        Test that the default message of NonUserFacingException is correct.\n        \"\"\"\n        exception = NonUserFacingException()\n        self.assertEqual(exception.message, \"An internal error occurred.\")",
        "detail": "tests.unit.test_app_common.test_exceptions_utils",
        "documentation": {}
    },
    {
        "label": "test_do_deploy",
        "kind": 2,
        "importPath": "tests.unit.test_app_deploy",
        "description": "tests.unit.test_app_deploy",
        "peekOfCode": "def test_do_deploy():\n    \"\"\"Test the do_deploy function.\"\"\"\n    # Create mock functions\n    mock_log = Mock()\n    mock_run = Mock()\n    # Call the function\n    do_deploy(mock_log, mock_run)\n    # Verify the logs\n    mock_log.assert_any_call(\"deploying...\")\n    mock_log.assert_any_call(\"deployed!\")",
        "detail": "tests.unit.test_app_deploy",
        "documentation": {}
    },
    {
        "label": "mock_subprocess_run",
        "kind": 2,
        "importPath": "tests.unit.test_deploy_all",
        "description": "tests.unit.test_deploy_all",
        "peekOfCode": "def mock_subprocess_run():\n    \"\"\"Mock subprocess.run for testing.\"\"\"\n    with patch(\"subprocess.run\") as mock_run:\n        mock_run.return_value = MagicMock(returncode=0)\n        yield mock_run\n@pytest.fixture\ndef mock_os_path_exists():\n    \"\"\"Mock os.path.exists for testing.\"\"\"\n    with patch(\"os.path.exists\") as mock_exists:\n        mock_exists.return_value = True",
        "detail": "tests.unit.test_deploy_all",
        "documentation": {}
    },
    {
        "label": "mock_os_path_exists",
        "kind": 2,
        "importPath": "tests.unit.test_deploy_all",
        "description": "tests.unit.test_deploy_all",
        "peekOfCode": "def mock_os_path_exists():\n    \"\"\"Mock os.path.exists for testing.\"\"\"\n    with patch(\"os.path.exists\") as mock_exists:\n        mock_exists.return_value = True\n        yield mock_exists\n@pytest.fixture\ndef mock_os_chmod():\n    \"\"\"Mock os.chmod for testing.\"\"\"\n    with patch(\"os.chmod\") as mock_chmod:\n        yield mock_chmod",
        "detail": "tests.unit.test_deploy_all",
        "documentation": {}
    },
    {
        "label": "mock_os_chmod",
        "kind": 2,
        "importPath": "tests.unit.test_deploy_all",
        "description": "tests.unit.test_deploy_all",
        "peekOfCode": "def mock_os_chmod():\n    \"\"\"Mock os.chmod for testing.\"\"\"\n    with patch(\"os.chmod\") as mock_chmod:\n        yield mock_chmod\ndef test_deploy_module_git_operations(\n    mock_subprocess_run, mock_os_path_exists, mock_os_chmod\n):\n    \"\"\"Test that git fetch and pull operations are performed before deployment.\"\"\"\n    module_path = \"/test/module\"\n    # Call deploy_module",
        "detail": "tests.unit.test_deploy_all",
        "documentation": {}
    },
    {
        "label": "test_deploy_module_git_operations",
        "kind": 2,
        "importPath": "tests.unit.test_deploy_all",
        "description": "tests.unit.test_deploy_all",
        "peekOfCode": "def test_deploy_module_git_operations(\n    mock_subprocess_run, mock_os_path_exists, mock_os_chmod\n):\n    \"\"\"Test that git fetch and pull operations are performed before deployment.\"\"\"\n    module_path = \"/test/module\"\n    # Call deploy_module\n    result = deploy_module(module_path)\n    assert result is True\n    # Check that git commands were called in the correct order\n    calls = mock_subprocess_run.call_args_list",
        "detail": "tests.unit.test_deploy_all",
        "documentation": {}
    },
    {
        "label": "test_deploy_module_git_fetch_failure",
        "kind": 2,
        "importPath": "tests.unit.test_deploy_all",
        "description": "tests.unit.test_deploy_all",
        "peekOfCode": "def test_deploy_module_git_fetch_failure(\n    mock_subprocess_run, mock_os_path_exists, mock_os_chmod\n):\n    \"\"\"Test that deployment fails if git fetch fails.\"\"\"\n    module_path = \"/test/module\"\n    # Make git fetch fail\n    def side_effect(*args, **kwargs):\n        if args[0] == [\"git\", \"fetch\"]:\n            raise subprocess.CalledProcessError(1, \"git fetch\")\n        return MagicMock(returncode=0)",
        "detail": "tests.unit.test_deploy_all",
        "documentation": {}
    },
    {
        "label": "retry_on_failure",
        "kind": 2,
        "importPath": "deploy_all",
        "description": "deploy_all",
        "peekOfCode": "def retry_on_failure(max_attempts=3, delay=5):\n    \"\"\"\n    Decorator that retries a function on failure.\n    Args:\n        max_attempts: Maximum number of attempts to retry\n        delay: Delay in seconds between retries\n    Returns:\n        Decorator function\n    \"\"\"\n    def decorator(func):",
        "detail": "deploy_all",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "deploy_all",
        "description": "deploy_all",
        "peekOfCode": "def run_command(command, cwd=None, shell=False, env=None):\n    \"\"\"\n    Run a shell command in the specified directory.\n    Args:\n        command: The command to run\n        cwd: Working directory to run the command in\n        shell: Whether to run command through shell\n        env: Environment variables dict to use\n    Returns:\n        True if command succeeded, False otherwise",
        "detail": "deploy_all",
        "documentation": {}
    },
    {
        "label": "deploy_module",
        "kind": 2,
        "importPath": "deploy_all",
        "description": "deploy_all",
        "peekOfCode": "def deploy_module(module_path):\n    \"\"\"\n    Deploy a single module by activating its venv and running app_setup.py deploy.\n    Before deployment, updates the git repository by fetching and pulling the\n    main branch.\n    Args:\n        module_path: Path to the module directory\n    Returns:\n        True if deployment succeeded, False otherwise\n    \"\"\"",
        "detail": "deploy_all",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "deploy_all",
        "description": "deploy_all",
        "peekOfCode": "def main():\n    \"\"\"Main function to deploy all stacks.\"\"\"\n    # control the execution time\n    start_time = time.time()\n    print(\"Starting deployment of all stacks...\")\n    # First ensure AWS SSO login is done\n    if not run_command(\"aws sso login\", shell=True):\n        print(\"AWS SSO login failed, aborting deployment\")\n        sys.exit(1)\n    # Check if there is a global python3.11 installation available",
        "detail": "deploy_all",
        "documentation": {}
    },
    {
        "label": "TestDeployAll",
        "kind": 6,
        "importPath": "test_deploy_all",
        "description": "test_deploy_all",
        "peekOfCode": "class TestDeployAll(unittest.TestCase):\n    \"\"\"Test cases for deploy_all.py.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.test_dir = os.path.dirname(os.path.abspath(__file__))\n        self.module_path = os.path.join(self.test_dir, \"test_module\")\n        os.makedirs(self.module_path, exist_ok=True)\n        # Create venv structure\n        venv_dir = os.path.join(self.module_path, \"venv\")\n        os.makedirs(os.path.join(venv_dir, \"bin\"), exist_ok=True)",
        "detail": "test_deploy_all",
        "documentation": {}
    }
]